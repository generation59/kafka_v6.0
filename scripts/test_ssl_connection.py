#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka –≤ WSL
"""
import os
import sys
import ssl
import socket
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path(__file__).parent.parent))

from kafka import KafkaProducer, KafkaConsumer
from kafka.errors import KafkaError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_ssl_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SSL —Ñ–∞–π–ª–æ–≤"""
    ssl_dir = Path(__file__).parent.parent / "ssl"
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {ssl_dir}")
    
    required_files = [
        "ca-cert",
        "client-cert-signed", 
        "client-cert-file",
        "kafka.client.keystore.jks",
        "kafka.client.truststore.jks"
    ]
    
    issues = []
    
    if not ssl_dir.exists():
        issues.append(f"SSL –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {ssl_dir}")
        return issues
    
    for file_name in required_files:
        file_path = ssl_dir / file_name
        if not file_path.exists():
            issues.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            try:
                with open(file_path, 'rb') as f:
                    f.read(1)
                logger.info(f"‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {file_path}")
            except PermissionError:
                issues.append(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {file_path}")
            except Exception as e:
                issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    return issues

def test_tcp_connection(host: str, port: int):
    """–¢–µ—Å—Ç TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}:{port}")
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex((host, port))
        sock.close()
        
        if result == 0:
            logger.info(f"‚úÖ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}:{port}: {e}")
        return False

def test_ssl_connection(host: str, port: int):
    """–¢–µ—Å—Ç SSL —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è"""
    logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}:{port}")
    try:
        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        with socket.create_connection((host, port), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=host) as ssock:
                logger.info(f"‚úÖ SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"SSL –≤–µ—Ä—Å–∏—è: {ssock.version()}")
                logger.info(f"Cipher: {ssock.cipher()}")
                return True
    except Exception as e:
        logger.error(f"‚ùå SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        return False

def test_kafka_ssl():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka —Å SSL"""
    try:
        from config.kafka_ssl_config import SSL_CONFIG, KAFKA_BROKERS_SSL
        
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kafka SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –±—Ä–æ–∫–µ—Ä
        broker = KAFKA_BROKERS_SSL[0]
        host, port = broker.split(':')
        port = int(port)
        
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –±—Ä–æ–∫–µ—Ä: {broker}")
        logger.info(f"SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {SSL_CONFIG}")
        
        # –¢–µ—Å—Ç TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not test_tcp_connection(host, port):
            return False
        
        # –¢–µ—Å—Ç SSL —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è
        if not test_ssl_connection(host, port):
            return False
        
        # –¢–µ—Å—Ç Kafka producer
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kafka Producer...")
        producer_config = {
            'bootstrap_servers': [broker],
            'value_serializer': lambda v: str(v).encode('utf-8'),
            'request_timeout_ms': 10000,
            'retries': 1
        }
        producer_config.update(SSL_CONFIG)
        
        producer = KafkaProducer(**producer_config)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (—ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
        metadata = producer.partitions_for("test-topic")
        logger.info(f"‚úÖ Kafka SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {metadata}")
        
        producer.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Kafka SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka –≤ WSL")
    logger.info("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Ñ–∞–π–ª—ã
    logger.info("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Ñ–∞–π–ª–æ–≤...")
    ssl_issues = check_ssl_files()
    if ssl_issues:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å SSL —Ñ–∞–π–ª–∞–º–∏:")
        for issue in ssl_issues:
            logger.error(f"  - {issue}")
        return
    else:
        logger.info("‚úÖ –í—Å–µ SSL —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã Docker
    logger.info("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...")
    import subprocess
    try:
        result = subprocess.run(['docker', 'ps', '--filter', 'name=kafka'], 
                              capture_output=True, text=True)
        if 'kafka-broker' in result.stdout:
            logger.info("‚úÖ Kafka –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã")
            logger.info(result.stdout)
        else:
            logger.error("‚ùå Kafka –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            logger.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: docker compose -f docker-compose-secure.yml up -d")
            return
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º Kafka SSL
    logger.info("\n3Ô∏è‚É£ –¢–µ—Å—Ç Kafka SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    if test_kafka_ssl():
        logger.info("üéâ SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        logger.error("üòû SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è WSL
        logger.info("\nüí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ WSL:")
        logger.info("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker Desktop –∑–∞–ø—É—â–µ–Ω")
        logger.info("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ SSL —Ñ–∞–π–ª–∞–º:")
        logger.info("   chmod 644 ssl/*.jks ssl/*.properties ssl/ca-cert ssl/*-cert-*")
        logger.info("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Kafka —Å SSL:")
        logger.info("   docker compose -f docker-compose-secure.yml down")
        logger.info("   docker compose -f docker-compose-secure.yml up -d")
        logger.info("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
        logger.info("   docker logs kafka-broker-1")

if __name__ == '__main__':
    main() 