#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"
echo "=============================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
wait_for_service() {
    local service_name=$1
    local port=$2
    local max_attempts=30
    local attempt=1
    
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ $service_name –Ω–∞ –ø–æ—Ä—Ç—É $port..."
    
    while [ $attempt -le $max_attempts ]; do
        if nc -z localhost $port 2>/dev/null; then
            echo "‚úÖ $service_name –¥–æ—Å—Ç—É–ø–µ–Ω!"
            return 0
        fi
        
        echo "   –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
        sleep 5
        attempt=$((attempt + 1))
    done
    
    echo "‚ùå $service_name –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–æ–≤
check_docker_images() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    required_images=(
        "confluentinc/cp-zookeeper:7.4.3"
        "confluentinc/cp-kafka:7.4.3"
        "confluentinc/cp-kafka-connect:7.4.3"
        "prom/prometheus:v2.48.0"
        "grafana/grafana:10.2.0"
        "prom/alertmanager:v0.26.0"
        # "docker.elastic.co/elasticsearch/elasticsearch:8.11.1"  # –û—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ CloudFront
        "bitnami/spark:3.5.0"
    )
    
    for image in "${required_images[@]}"; do
        if ! docker image inspect "$image" >/dev/null 2>&1; then
            echo "‚¨áÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ $image..."
            docker pull "$image"
        fi
    done
    
    echo "‚úÖ –í—Å–µ Docker –æ–±—Ä–∞–∑—ã –≥–æ—Ç–æ–≤—ã"
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

if ! command -v docker >/dev/null 2>&1; then
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! docker compose version >/dev/null 2>&1; then
    echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! command -v nc >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  netcat –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞"
fi

check_docker_images

# 2. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "2Ô∏è‚É£  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose down -v 2>/dev/null || true

# 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "3Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p data/kafka-connect-data
mkdir -p data/output
chmod 777 data/kafka-connect-data
chmod 777 data/output

# 4. –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
echo "4Ô∏è‚É£  –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
docker compose up -d

# 5. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "5Ô∏è‚É£  –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."

wait_for_service "Zookeeper" 2181
wait_for_service "Kafka Broker 1" 9092
wait_for_service "Kafka Broker 2" 9093
wait_for_service "Kafka Broker 3" 9094
wait_for_service "Kafka Connect" 8083
wait_for_service "Prometheus" 9090
wait_for_service "Grafana" 3000
wait_for_service "Alertmanager" 9394
# wait_for_service "Elasticsearch" 9200  # –û—Ç–∫–ª—é—á–µ–Ω–æ
wait_for_service "Spark Master" 8080

# 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka —Ç–æ–ø–∏–∫–æ–≤
echo "6Ô∏è‚É£  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka —Ç–æ–ø–∏–∫–æ–≤..."
chmod +x scripts/setup_kafka_topics.sh
./scripts/setup_kafka_topics.sh

# 7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka Connect
echo "7Ô∏è‚É£  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka Connect..."
sleep 10  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Kafka Connect

echo "–°–æ–∑–¥–∞–Ω–∏–µ File Sink –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞..."
curl -X POST http://localhost:8083/connectors \
    -H "Content-Type: application/json" \
    -d @config/file-sink-connector.json || echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "8Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã..."

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "==================="

# Kafka
if nc -z localhost 9092 2>/dev/null; then
    echo "‚úÖ Kafka Cluster: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    docker exec kafka-broker-1 kafka-topics.sh --bootstrap-server localhost:9092 --list | head -5
else
    echo "‚ùå Kafka Cluster: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# Kafka Connect
if curl -s http://localhost:8083/connectors >/dev/null 2>&1; then
    echo "‚úÖ Kafka Connect: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "   –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã: $(curl -s http://localhost:8083/connectors | jq -r '. | length') –∞–∫—Ç–∏–≤–Ω—ã—Ö"
else
    echo "‚ùå Kafka Connect: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# Prometheus
if curl -s http://localhost:9090/-/healthy >/dev/null 2>&1; then
    echo "‚úÖ Prometheus: —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Prometheus: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# Grafana
if curl -s http://localhost:3000/api/health >/dev/null 2>&1; then
    echo "‚úÖ Grafana: —Ä–∞–±–æ—Ç–∞–µ—Ç (admin/grafana)"
else
    echo "‚ùå Grafana: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –§–∞–π–ª–æ–≤—ã–π –ø–æ–∏—Å–∫
echo "‚úÖ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤: —Ñ–∞–π–ª–æ–≤—ã–π (Elasticsearch –æ—Ç–∫–ª—é—á–µ–Ω)"

# Spark
if curl -s http://localhost:8080 >/dev/null 2>&1; then
    echo "‚úÖ Spark Master: —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Spark Master: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""
echo "üéØ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
echo "=================="
echo "‚Ä¢ Grafana:        http://localhost:3000 (admin/grafana)"
echo "‚Ä¢ Prometheus:     http://localhost:9090"
echo "‚Ä¢ Alertmanager:   http://localhost:9394"
echo "‚Ä¢ Spark Master:   http://localhost:8080"
echo "‚Ä¢ Kafka Connect:  http://localhost:8083"

echo ""
echo "üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π:"
echo "================================="
echo "‚Ä¢ –ó–∞–ø—É—Å–∫ Shop API:        python -m src.shop_api.producer"
echo "‚Ä¢ –ó–∞–ø—É—Å–∫ Client API:      python -m src.client_api.client search '—É–º–Ω—ã–µ —á–∞—Å—ã'"
echo "‚Ä¢ –ó–∞–ø—É—Å–∫ Stream Filter:   python -m src.stream_processor.banned_filter start"
echo "‚Ä¢ –ó–∞–ø—É—Å–∫ Analytics:       python -m src.analytics.spark_analytics start"
echo "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏:      python -m src.stream_processor.banned_filter ban --product-id 'ID'"

echo ""
echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
echo ""
echo "üìù –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker compose down" 