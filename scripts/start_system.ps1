# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞

Write-Host "üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞" -ForegroundColor Green
Write-Host "=============================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
function Wait-ForService {
    param(
        [string]$ServiceName,
        [int]$Port,
        [int]$MaxAttempts = 30
    )
    
    Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ $ServiceName –Ω–∞ –ø–æ—Ä—Ç—É $Port..." -ForegroundColor Yellow
    
    for ($attempt = 1; $attempt -le $MaxAttempts; $attempt++) {
        try {
            $connection = Test-NetConnection -ComputerName localhost -Port $Port -WarningAction SilentlyContinue
            if ($connection.TcpTestSucceeded) {
                Write-Host "‚úÖ $ServiceName –¥–æ—Å—Ç—É–ø–µ–Ω!" -ForegroundColor Green
                return $true
            }
        }
        catch {
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        }
        
        Write-Host "   –ü–æ–ø—ã—Ç–∫–∞ $attempt/$MaxAttempts..."
        Start-Sleep -Seconds 5
    }
    
    Write-Host "‚ùå $ServiceName –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è" -ForegroundColor Red
    return $false
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–æ–≤
function Test-DockerImages {
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..." -ForegroundColor Cyan
    
    $requiredImages = @(
    "confluentinc/cp-zookeeper:7.4.3",
    "confluentinc/cp-kafka:7.4.3",
    "confluentinc/cp-kafka-connect:7.4.3",
    "prom/prometheus:v2.48.0",
    "grafana/grafana:10.2.0",
    "prom/alertmanager:v0.26.0",
    # "docker.elastic.co/elasticsearch/elasticsearch:8.11.1",  # –û—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ CloudFront
    "bitnami/spark:3.5.0"
)
    
    foreach ($image in $requiredImages) {
        $result = docker image inspect $image 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚¨áÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ $image..." -ForegroundColor Yellow
            docker pull $image
        }
    }
    
    Write-Host "‚úÖ –í—Å–µ Docker –æ–±—Ä–∞–∑—ã –≥–æ—Ç–æ–≤—ã" -ForegroundColor Green
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
Write-Host "1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor Cyan

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $dockerVersion" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
try {
    $composeVersion = docker compose version
    Write-Host "‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Red
    exit 1
}

Test-DockerImages

# 2. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
Write-Host "2Ô∏è‚É£  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..." -ForegroundColor Cyan
docker compose down -v 2>$null

# 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
Write-Host "3Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..." -ForegroundColor Cyan
New-Item -ItemType Directory -Force -Path "data/kafka-connect-data" | Out-Null
New-Item -ItemType Directory -Force -Path "data/output" | Out-Null

# 4. –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
Write-Host "4Ô∏è‚É£  –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..." -ForegroundColor Cyan
docker compose up -d

# 5. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
Write-Host "5Ô∏è‚É£  –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor Cyan

$services = @(
    @{Name="Zookeeper"; Port=2181},
    @{Name="Kafka Broker 1"; Port=9092},
    @{Name="Kafka Broker 2"; Port=9093}, 
    @{Name="Kafka Broker 3"; Port=9094},
    @{Name="Kafka Connect"; Port=8083},
    @{Name="Prometheus"; Port=9090},
    @{Name="Grafana"; Port=3000},
            @{Name="Alertmanager"; Port=9394},

    @{Name="Spark Master"; Port=8080}
)

foreach ($service in $services) {
    Wait-ForService -ServiceName $service.Name -Port $service.Port
}

# 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka —Ç–æ–ø–∏–∫–æ–≤
Write-Host "6Ô∏è‚É£  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka —Ç–æ–ø–∏–∫–æ–≤..." -ForegroundColor Cyan

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞
function New-KafkaTopic {
    param(
        [string]$TopicName,
        [int]$Partitions = 6,
        [int]$Replication = 3
    )
    
    Write-Host "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞: $TopicName (–ø–∞—Ä—Ç–∏—Ü–∏–∏: $Partitions, —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è: $Replication)"
    
    docker exec kafka-broker-1 kafka-topics.sh `
        --create `
        --topic $TopicName `
        --bootstrap-server localhost:9092 `
        --partitions $Partitions `
        --replication-factor $Replication `
        --config min.insync.replicas=2 `
        --if-not-exists
}

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤
New-KafkaTopic -TopicName "shop-products" -Partitions 6 -Replication 3
New-KafkaTopic -TopicName "filtered-products" -Partitions 6 -Replication 3
New-KafkaTopic -TopicName "filtered-events" -Partitions 3 -Replication 3
New-KafkaTopic -TopicName "client-searches" -Partitions 3 -Replication 3
New-KafkaTopic -TopicName "client-recommendations" -Partitions 3 -Replication 3
New-KafkaTopic -TopicName "recommendations-results" -Partitions 3 -Replication 3

# –°–ª—É–∂–µ–±–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
New-KafkaTopic -TopicName "docker-connect-configs" -Partitions 1 -Replication 3
New-KafkaTopic -TopicName "docker-connect-offsets" -Partitions 25 -Replication 3
New-KafkaTopic -TopicName "docker-connect-status" -Partitions 5 -Replication 3

# 7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka Connect
Write-Host "7Ô∏è‚É£  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka Connect..." -ForegroundColor Cyan
Start-Sleep -Seconds 10

Write-Host "–°–æ–∑–¥–∞–Ω–∏–µ File Sink –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞..."
try {
    $connectorConfig = Get-Content "config/file-sink-connector.json" -Raw
    $response = Invoke-RestMethod -Uri "http://localhost:8083/connectors" -Method Post -Body $connectorConfig -ContentType "application/json"
    Write-Host "‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω" -ForegroundColor Green
}
catch {
    Write-Host "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)" -ForegroundColor Yellow
}

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
Write-Host "8Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã..." -ForegroundColor Cyan

Write-Host ""
Write-Host "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:" -ForegroundColor Cyan
Write-Host "==================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
$kafkaStatus = Test-NetConnection -ComputerName localhost -Port 9092 -WarningAction SilentlyContinue
if ($kafkaStatus.TcpTestSucceeded) {
    Write-Host "‚úÖ Kafka Cluster: —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
}
else {
    Write-Host "‚ùå Kafka Cluster: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
}

try {
    $connectResponse = Invoke-RestMethod -Uri "http://localhost:8083/connectors" -Method Get
    Write-Host "‚úÖ Kafka Connect: —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
    Write-Host "   –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã: $($connectResponse.Count) –∞–∫—Ç–∏–≤–Ω—ã—Ö"
}
catch {
    Write-Host "‚ùå Kafka Connect: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
}

try {
    $prometheusResponse = Invoke-RestMethod -Uri "http://localhost:9090/-/healthy" -Method Get
    Write-Host "‚úÖ Prometheus: —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Prometheus: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
}

try {
    $grafanaResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/health" -Method Get
    Write-Host "‚úÖ Grafana: —Ä–∞–±–æ—Ç–∞–µ—Ç (admin/grafana)" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Grafana: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
}

Write-Host "‚úÖ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤: —Ñ–∞–π–ª–æ–≤—ã–π (Elasticsearch –æ—Ç–∫–ª—é—á–µ–Ω)" -ForegroundColor Green

$sparkStatus = Test-NetConnection -ComputerName localhost -Port 8080 -WarningAction SilentlyContinue
if ($sparkStatus.TcpTestSucceeded) {
    Write-Host "‚úÖ Spark Master: —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
}
else {
    Write-Host "‚ùå Spark Master: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéØ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:" -ForegroundColor Cyan
Write-Host "=================="
Write-Host "‚Ä¢ Grafana:        http://localhost:3000 (admin/grafana)"
Write-Host "‚Ä¢ Prometheus:     http://localhost:9090"
    Write-Host "‚Ä¢ Alertmanager:   http://localhost:9394"
Write-Host "‚Ä¢ Spark Master:   http://localhost:8080"
Write-Host "‚Ä¢ Kafka Connect:  http://localhost:8083"

Write-Host ""
Write-Host "üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π:" -ForegroundColor Cyan
Write-Host "================================="
Write-Host "‚Ä¢ –ó–∞–ø—É—Å–∫ Shop API:        python -m src.shop_api.producer"
Write-Host "‚Ä¢ –ó–∞–ø—É—Å–∫ Client API:      python -m src.client_api.client search '—É–º–Ω—ã–µ —á–∞—Å—ã'"
Write-Host "‚Ä¢ –ó–∞–ø—É—Å–∫ Stream Filter:   python -m src.stream_processor.banned_filter start"
Write-Host "‚Ä¢ –ó–∞–ø—É—Å–∫ Analytics:       python -m src.analytics.spark_analytics start"
Write-Host "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏:      python -m src.stream_processor.banned_filter ban --product-id 'ID'"

Write-Host ""
Write-Host "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!" -ForegroundColor Green
Write-Host ""
Write-Host "üìù –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker compose down" -ForegroundColor Yellow 